#!/usr/bin/env python

import logging
import json
import signal

import click
from kafka import KafkaProducer

from snuba import settings
from snuba.processor import get_key, process_raw_event
from snuba.consumer import AbstractConsumerWorker, BatchingKafkaConsumer

logger = logging.getLogger('snuba.processor')


@click.command()
@click.option('--raw-events-topic', default=settings.RAW_EVENTS_TOPIC,
              help='Topic to consume raw events from.')
@click.option('--consumer-group', default=settings.PROCESSOR_CONSUMER_GROUP,
              help='Consumer group use for consuming the raw events topic.')
@click.option('--processed-events-topic', default=settings.WRITER_TOPIC,
              help='Topic to send processed events to.')
@click.option('--bootstrap-server', default=settings.BROKERS, multiple=True,
              help='Kafka bootstrap server to use.')
@click.option('--log-level', default='WARN', help='Logging level to use.')
def run(raw_events_topic, consumer_group, processed_events_topic, bootstrap_server, log_level):
    logging.basicConfig(level=getattr(logging, log_level.upper()))

    producer = KafkaProducer(bootstrap_servers=bootstrap_server)

    class ConsumerWorker(AbstractConsumerWorker):
        def process_message(self, message):
            event = json.loads(message.value)

            key = get_key(event).encode('utf-8')
            processed = json.dumps(process_raw_event(event)).encode('utf-8')

            return (key, processed)

        def flush_batch(self, batch):
            for key, value in batch:
                producer.send(
                    processed_events_topic,
                    key=key,
                    value=value,
                )

            producer.flush()

        def shutdown(self):
            producer.close()

    consumer = BatchingKafkaConsumer(
        raw_events_topic,
        consumer_worker=ConsumerWorker(),
        max_batch_size=1000,
        max_batch_time=1000,
        bootstrap_servers=bootstrap_server,
        group_id=consumer_group,
        auto_offset_reset='earliest',
        consumer_timeout_ms=1000,
    )

    def handler(signum, frame):
        consumer.signal_shutdown()

    signal.signal(signal.SIGINT, handler)

    consumer.run()


if __name__ == '__main__':
    run()
