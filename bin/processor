#!/usr/bin/env python

import logging
import json
import signal

import click
from kafka import KafkaConsumer, KafkaProducer

from snuba import settings
from snuba.processor import get_key, process_raw_event

shutdown = False
logger = logging.getLogger('snuba.processor')


def handler(signum, frame):
    global shutdown
    shutdown = True

    logger.warning("SIGINT received, initiating shutdown")


signal.signal(signal.SIGINT, handler)


@click.command()
@click.option('--raw-events-topic', default=settings.RAW_EVENTS_TOPIC,
              help='Topic to consume raw events from.')
@click.option('--consumer-group', default=settings.PROCESSOR_CONSUMER_GROUP,
              help='Consumer group use for consuming the raw events topic.')
@click.option('--processed-events-topic', default=settings.WRITER_TOPIC,
              help='Topic to send processed events to.')
@click.option('--bootstrap-server', default=settings.BROKERS, multiple=True,
              help='Kafka bootstrap server to use.')
@click.option('--log-level', default='WARN', help='Logging level to use.')
def run(raw_events_topic, consumer_group, processed_events_topic, bootstrap_server, log_level):
    logging.basicConfig(level=getattr(logging, log_level.upper()))

    consumer = KafkaConsumer(
        raw_events_topic,
        bootstrap_servers=bootstrap_server,
        group_id=consumer_group,
        auto_offset_reset='earliest',
        consumer_timeout_ms=1000,
    )

    producer = KafkaProducer(
        bootstrap_servers=bootstrap_server,
        linger_ms=50,
    )

    while not shutdown:
        for msg in consumer:
            event = json.loads(msg.value)

            key = get_key(event)
            processed = process_raw_event(event)

            producer.send(
                processed_events_topic,
                key=key.encode('utf-8'),
                value=json.dumps(processed).encode('utf-8'),
            )

            if shutdown:
                break

    # shutdown
    consumer.close()
    producer.flush()
    producer.close()


if __name__ == '__main__':
    run()
